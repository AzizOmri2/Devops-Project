pipeline {
    agent any

    tools {
        maven 'maven'
        jdk "jdk"
    }
    
    environment {
        SONARQUBE_URL = 'http://203.0.113.136:9000'
        SONARQUBE_TOKEN = credentials('sonarqube')
    
        dockerimagename = "chaima21/my-web-app"
        dockerImage = ""
        registryCredential = 'dockerhub'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://gitlab.dpc.com.tn/chaima.boughanmi/projct_association.git', credentialsId: 'gitlab'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        /*stage('Publish to Nexus Repository Manager') {
            steps {
                script {
                    nexusArtifactUploader artifacts: [[artifactId: 'association', classifier: '', file: 'target/association-0.0.1-SNAPSHOT.war', type: 'war']], credentialsId: 'nexusid', groupId: 'com.dpc', nexusUrl: '203.0.113.136:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'maven', version: '0.0.1-SNAPSHOT'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonarqube') {
                    sh 'mvn sonar:sonar -Dsonar.projectKey=my-project -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONARQUBE_TOKEN'
                }
            }
        }
        
        
        stage('OWASP-Dependency-Check') {
            steps {
                dependencyCheck additionalArguments: ''' 
                    -o './'
                    -s './'
                    -f 'ALL' 
                    --prettyPrint''', odcInstallation: 'OWASP-Dependency-Check'
        
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                
                 
            }
        }
        
        stage('Build Docker image') {
            steps {
                script {
                    // Build Docker image from the specified Dockerfile
                    dockerImage = docker.build dockerimagename
                }
            }
        }


        stage('Push Docker image to DockerHub') {
            steps {
                script {
                    // Push Docker image to DockerHub
                    docker.withRegistry('https://registry.hub.docker.com', registryCredential) {
                        dockerImage.push("latest")
                    }
                }
            }
        }
        
        
        stage('Deploy') {
            steps {
                script {
                    sh 'kubectl apply -f kubernetes/dep.yml'
                   }
                }
            
        }*/
    
        
    }

}